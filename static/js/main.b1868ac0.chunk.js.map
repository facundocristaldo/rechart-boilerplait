{"version":3,"sources":["components/chart/ChartConainer.js","components/chart/Chart.js","components/GridLayout/Dashboard.js","screens/Home.js","components/Navbar/Navbar.js","screens/ChartScreen.js","screens/NotFound.js","App.js","reportWebVitals.js","index.js"],"names":["ChartContainer","props","calledFromDashboard","children","Card","style","height","margin","padding","data","lineData","Chart","type","useState","showAxisNames","setShowAxisNames","showGrid","setShowGrid","showTooltip","setShowTooltip","showPerson1","setShowPerson1","showPerson2","setShowPerson2","showLegend","setShowLegend","chart","LineChart","XAxis","dataKey","YAxis","CartesianGrid","stroke","Tooltip","Line","AreaChart","strokeDasharray","Area","fillOpacity","fill","BarChart","Bar","RadarChart","radarData","PolarGrid","PolarAngleAxis","PolarRadiusAxis","angle","domain","maxValue","Radar","name","Legend","FunnelChart","Funnel","funnelData","isAnimationActive","LabelList","position","buttons","push","Button","variant","onClick","Box","width","ResponsiveContainer","to","Dashboard","cardStyle","boxSizing","cards","setCards","useEffect","key","dataGrid","x","y","w","h","minH","minW","chartType","visible","Container","Typography","component","className","cols","rowHeight","map","card","data-grid","top","right","zIndex","cardKey","newCards","console","log","cardIndex","findIndex","index","splice","closeCard","Home","Navbar","AppBar","Toolbar","ChartScreen","useParams","NotFound","App","backgroundColor","minHeight","path","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b1868ac0.chunk.js","sourcesContent":["import { Card } from '@material-ui/core';\nimport React from 'react';\n\nexport default function ChartContainer({ calledFromDashboard, children }, props) {\n    if (!calledFromDashboard)\n        return (\n            <Card style={{ height: 500, margin: 20, padding: 20 }}>\n                {children}\n            </Card>\n        )\n    return (\n        <>\n            { children}\n        </>\n    )\n}","import { Box, Button } from '@material-ui/core';\nimport React, { useState } from 'react';\nimport { LineChart, Line, ResponsiveContainer, XAxis, YAxis, CartesianGrid, Tooltip, AreaChart, Area, BarChart, Bar, PolarGrid, RadarChart, PolarAngleAxis, PolarRadiusAxis, Radar, Legend, FunnelChart, Funnel, LabelList } from 'recharts';\nimport lineData from '../../test/lineData.json'\nimport radarData from '../../test/radarData.json'\nimport funnelData from '../../test/funnelData.json'\nimport ChartContainer from './ChartConainer';\nimport { Redirect } from 'react-router';\nconst data = lineData;\n\nexport default function Chart(props) {\n    const { type, calledFromDashboard } = props\n\n    const [showAxisNames, setShowAxisNames] = useState(true)\n    const [showGrid, setShowGrid] = useState(true)\n    const [showTooltip, setShowTooltip] = useState(true)\n    const [showPerson1, setShowPerson1] = useState(true)\n    const [showPerson2, setShowPerson2] = useState(true)\n    const [showLegend, setShowLegend] = useState(true)\n\n    //chart\n    let chart = null;\n    switch (type) {\n        case \"line\":\n            chart = (\n                <LineChart data={data}>\n                    {(showAxisNames && <XAxis dataKey=\"name\" />)}\n                    {(showAxisNames && <YAxis />)}\n                    {(showGrid && <CartesianGrid stroke=\"#ccc\" />)}\n                    {(showTooltip && <Tooltip />)}\n                    <Line type=\"monotone\" dataKey=\"uv\" stroke=\"#8884d8\" />\n                </LineChart>\n            )\n            break;\n        case \"area\":\n            chart = (\n                <AreaChart data={data}>\n                    {(showAxisNames && <XAxis dataKey=\"name\" />)}\n                    {(showAxisNames && <YAxis />)}\n                    {(showGrid && <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#ccc\" />)}\n                    {(showTooltip && <Tooltip />)}\n                    <Area type=\"monotone\" dataKey=\"uv\" stroke=\"#291F1E\" fillOpacity={.5} fill=\"#291F1E\" />\n                    <Area type=\"monotone\" dataKey=\"pv\" stroke=\"#477998\" fillOpacity={.5} fill=\"#477998\" />\n                </AreaChart>\n            )\n            break;\n        case \"bar\":\n            chart = (\n                <BarChart data={data}>\n                    {(showAxisNames && <XAxis dataKey=\"name\" />)}\n                    {(showAxisNames && <YAxis />)}\n                    {(showGrid && <CartesianGrid strokeDasharray=\"3 3\" />)}\n                    {(showTooltip && <Tooltip />)}\n                    <Bar type=\"monotone\" dataKey=\"uv\" stroke=\"#291F1E\" fillOpacity={.5} fill=\"#291F1E\" />\n                    <Bar type=\"monotone\" dataKey=\"pv\" stroke=\"#477998\" fillOpacity={.5} fill=\"#477998\" />\n                </BarChart>\n            )\n            break;\n        case \"radar\":\n            chart = (\n                <RadarChart data={radarData}>\n                    {(showGrid && <PolarGrid />)}\n                    <PolarAngleAxis dataKey=\"subject\" />\n                    <PolarRadiusAxis angle={90} domain={[0, radarData[0].maxValue]} />\n                    {(showPerson1 && <Radar name=\"Person 1\" dataKey=\"A\" stroke=\"#8884d8\" fill=\"#8884d8\" fillOpacity={0.6} />)}\n                    {(showPerson2 && <Radar name=\"Person 2\" dataKey=\"B\" stroke=\"#82ca9d\" fill=\"#82ca9d\" fillOpacity={0.6} />)}\n                    {(showLegend && <Legend />)}\n                </RadarChart>\n            )\n            break;\n        case \"funnel\":\n            chart = (\n                <FunnelChart >\n                    {(showTooltip && <Tooltip />)}\n                    <Funnel\n                        dataKey=\"value\"\n                        data={funnelData}\n                        isAnimationActive>\n                        {(showLegend && <LabelList position=\"right\" fill=\"#000\" stroke=\"none\" dataKey=\"name\" />)}\n                    </Funnel>\n                </FunnelChart>\n            )\n            break;\n        default:\n            break;\n    }\n    //Buttons\n    let buttons = [];\n    if (!calledFromDashboard) {\n        if (type !== \"radar\" && type !== \"funnel\") buttons.push(<Button variant=\"text\" onClick={() => setShowAxisNames(!showAxisNames)}>{(!showAxisNames) ? \"Show\" : \"Hide\"} Axis Names</Button>)\n        if (type !== \"funnel\") buttons.push(<Button variant=\"text\" onClick={() => setShowGrid(!showGrid)}>{(!showGrid) ? \"Show\" : \"Hide\"} Cartesian Grid</Button>)\n        if (type !== \"radar\") buttons.push(<Button variant=\"text\" onClick={() => setShowTooltip(!showTooltip)}>{(!showTooltip) ? \"Show\" : \"Hide\"} Tooltip</Button>)\n        if (type === \"radar\") buttons.push(<Button variant=\"text\" onClick={() => setShowPerson1(!showPerson1)}>{(!showPerson1) ? \"Show\" : \"Hide\"} Person 1</Button>)\n        if (type === \"radar\") buttons.push(<Button variant=\"text\" onClick={() => setShowPerson2(!showPerson2)}>{(!showPerson2) ? \"Show\" : \"Hide\"} Person 2</Button>)\n        if (type === \"radar\" || type === \"funnel\") buttons.push(<Button variant=\"text\" onClick={() => setShowLegend(!showLegend)}>{(!showLegend) ? \"Show\" : \"Hide\"} Legend</Button>)\n    }\n    return (\n        <Box width=\"100%\" height=\"100%\">\n            {(!calledFromDashboard && <Box>{buttons}</Box>)}\n            <ChartContainer calledFromDashboard={calledFromDashboard}>\n                <ResponsiveContainer>\n                    {chart ? chart : <Redirect to=\"/notfound\" />}\n                </ResponsiveContainer>\n            </ChartContainer>\n        </Box>\n    )\n}","import { Card, Container, Typography } from '@material-ui/core';\nimport React, { useEffect, useState } from 'react';\nimport ReactGridLayout from 'react-grid-layout';\nimport \"react-grid-layout/css/styles.css\";\nimport Chart from '../chart/Chart';\n\n\nexport default function Dashboard() {\n    const cardStyle = { padding: 10, boxSizing: \"border-box\", position: \"relative\" }\n    const [cards, setCards] = useState([])\n    useEffect(() => {\n        setCards([\n            {\n                key: \"A\",\n                dataGrid: { x: 0, y: 0, w: 6, h: 6, minH: 3, minW: 1 },\n                chartType: \"line\",\n                visible: true,\n            }, {\n                key: \"B\",\n                dataGrid: { x: 0, y: 1, w: 2, h: 6, minH: 3, minW: 1 },\n                chartType: \"bar\",\n                visible: true,\n            }, {\n                key: \"C\",\n                dataGrid: { x: 2, y: 1, w: 2, h: 6, minH: 3, minW: 1 },\n                chartType: \"area\",\n                visible: true,\n            }, {\n                key: \"D\",\n                dataGrid: { x: 4, y: 1, w: 2, h: 6, minH: 3, minW: 1 },\n                chartType: \"radar\",\n                visible: true,\n            }, {\n                key: \"E\",\n                dataGrid: { x: 2, y: 2, w: 2, h: 6, minH: 3, minW: 1 },\n                chartType: \"funnel\",\n                visible: true,\n            },\n        ])\n    }, [])\n    const closeCard = (cardKey) => {\n        const newCards = [...cards]\n        console.log(\"cardKey\", cardKey)\n        console.log(\"cards\", cards)\n        const cardIndex = cards.findIndex((card, index) => card.key === cardKey)\n        newCards.splice(cardIndex, 1)\n        setCards([...newCards])\n    }\n    return (\n        <Container style={{ position: \"relative\" }}>\n            <Typography variant=\"h3\" component=\"h1\">DashBoard</Typography>\n            <ReactGridLayout\n                className=\"layout\"\n                cols={6}\n                rowHeight={60}\n                width={1200}\n            >\n                {cards.map(card => (\n                    <Card key={card.key} data-grid={card.dataGrid} style={cardStyle}>\n                        <Chart type={card.chartType} calledFromDashboard={true} />\n                        <span style={{ position: \"absolute\", top: 2, right: 2, zIndex: 2 }} onClick={() => closeCard(card.key)}>X</span>\n                    </Card>\n                ))}\n            </ReactGridLayout>\n        </Container>\n    )\n}","import React from 'react';\nimport Dashboard from '../components/GridLayout/Dashboard';\n\nexport default function Home() {\n    return (\n        <Dashboard />\n    )\n}","import { AppBar, Button, Toolbar } from '@material-ui/core';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\n\nexport default function Navbar() {\n    return (\n        <AppBar style={{ position: \"relative\" }}>\n            <Toolbar>\n                <Link to=\"/\"><Button>Dashboard</Button></Link>\n                <Link to=\"/chart/line\"><Button>Line Chart</Button></Link>\n                <Link to=\"/chart/area\"><Button>Area Chart</Button></Link>\n                <Link to=\"/chart/bar\"><Button>Bar Chart</Button></Link>\n                <Link to=\"/chart/radar\"><Button>Radar Chart</Button></Link>\n                <Link to=\"/chart/funnel\"><Button>Funnel Chart</Button></Link>\n            </Toolbar>\n        </AppBar>\n    )\n}","import { Container, Typography } from '@material-ui/core';\nimport React from 'react';\nimport { useParams } from 'react-router';\nimport Chart from '../components/chart/Chart';\n\nexport default function ChartScreen() {\n    const { type } = useParams();\n    return (type && (\n        <Container>\n            <Typography variant=\"h3\" component=\"h1\">Chart type: {type}</Typography>\n            <Chart type={type} calledFromDashboard={false} />\n        </Container>\n    )\n    )\n\n}","import { Container, Typography } from '@material-ui/core';\nimport React from 'react';\n\nexport default function NotFound() {\n    return (\n        <Container>\n            <Typography variant=\"h3\" component=\"h1\">Not found</Typography>\n        </Container>\n    )\n}","import { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport Home from './screens/Home'\nimport './App.css';\nimport Navbar from './components/Navbar/Navbar';\nimport { Box } from '@material-ui/core';\nimport ChartScreen from './screens/ChartScreen';\nimport NotFound from './screens/NotFound';\n\nexport default function App() {\n  return (\n    <Box style={{ backgroundColor: \"rgb(247 247 247)\", minHeight: \"100vh\" }}>\n      <BrowserRouter>\n        <Navbar />\n        <Switch>\n          <Route path={`/chart/:type`} component={ChartScreen} />\n          <Route exact path=\"/notfound\" component={NotFound} />\n          <Route exact path=\"/\" component={Home} />\n        </Switch>\n      </BrowserRouter>\n    </Box>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}